{"version":3,"sources":["components/Player/Player.tsx","App.tsx","index.tsx"],"names":["Orientation","FitMode","Player","videoElementRef","createRef","resizeObserver","ResizeObserver","manageVideoOrientation","this","observe","videoElement","nextProps","props","orientation","stream","delta","current","informationHandle","videoElementOrientation","getVideoElementOrientation","videoStreamOrientation","getStreamOrientation","aspectRatioDelta","getAspectRationDelta","fitMode","Contain","type","Cover","elementOrientation","streamOrientation","toPrecision","style","objectFit","getOrientation","offsetWidth","offsetHeight","Landscape","posterWidth","posterHeight","width","height","Portrait","elementAspectRatio","streamAspectRation","Math","abs","posterUrl","className","ref","poster","Component","App","dimensionsList","state","dimensions","information","field","value","setState","data","name","defaultChecked","onChange","formChangeHandle","min","max","step","defaultValue","event","target","valueAsNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAIKA,EAKAC,E,iHALAD,K,oBAAAA,E,uBAAAA,M,cAKAC,K,kBAAAA,E,eAAAA,M,SAqGUC,E,4MA/FLC,gBAA+CC,sB,EAC/CC,eAAiC,IAAIC,gBAAe,kBAAM,EAAKC,4B,uDAEvE,WACEC,KAAKH,eAAeI,QAAQD,KAAKE,gB,mCAGnC,SAAsBC,GAAoC,IAAD,EAChBH,KAAKI,MAApCC,EAD+C,EAC/CA,YAAaC,EADkC,EAClCA,OAAQC,EAD0B,EAC1BA,MAC7B,OAAOJ,EAAUI,QAAUA,GAASJ,EAAUE,cAAgBA,GAAeF,EAAUG,SAAWA,I,gCAGpG,WACEN,KAAKD,2B,wBAGP,WACE,OAAOC,KAAKL,gBAAgBa,U,oCAG9B,WACE,GAAKR,KAAKE,aAAV,CAD+B,MAGcF,KAAKI,MAA1CE,EAHuB,EAGvBA,OAAQC,EAHe,EAGfA,MAAOE,EAHQ,EAGRA,kBACjBC,EAAuCV,KAAKW,6BAC5CC,EAAsCZ,KAAKa,uBAC3CC,EAAmBd,KAAKe,uBAE1BC,EAAmBvB,EAAQwB,QAEX,WAAhBX,EAAOY,KACTF,EAAUvB,EAAQwB,SACTP,IAA4BE,GAE5BE,GAAoBP,KAD7BS,EAAUvB,EAAQ0B,OAKpBV,EAAkB,CAChBO,QAASA,EACTI,mBAAoBV,EACpBW,kBAAmBT,EACnBE,iBAAkBA,EAAiBQ,YAAY,KAGjDtB,KAAKE,aAAaqB,MAAMC,UAAYR,K,wCAGtC,WACE,OAAOhB,KAAKE,aACRF,KAAKyB,eAAezB,KAAKE,aAAawB,YAAa1B,KAAKE,aAAayB,cACrEnC,EAAYoC,Y,kCAGlB,WACE,OAAO5B,KAAKyB,eAAezB,KAAK6B,YAAa7B,KAAK8B,gB,4BAGpD,SAAuBC,EAAeC,GACpC,OAAOD,GAASC,EACZxC,EAAYoC,UACZpC,EAAYyC,W,kCAGlB,WACE,IAAMC,EAA6BlC,KAAKE,aAAawB,YAAc1B,KAAKE,aAAayB,aAC/EQ,EAA6BnC,KAAK6B,YAAc7B,KAAK8B,aAG3D,OAFsBM,KAAKC,IAAIH,EAAqBC,K,uBAKtD,WAAmC,IAAD,EACAnC,KAAKI,MAA7BC,EADwB,EACxBA,YAAaC,EADW,EACXA,OACrB,OAAOD,IAAgBb,EAAYoC,UAAYtB,EAAOyB,MAAQzB,EAAO0B,S,wBAGvE,WAAoC,IAAD,EACDhC,KAAKI,MAA7BC,EADyB,EACzBA,YAAaC,EADY,EACZA,OACrB,OAAOD,IAAgBb,EAAYoC,UAAYtB,EAAO0B,OAAS1B,EAAOyB,Q,oBAGxE,WACE,IAAMO,EAAiB,wCAAoCtC,KAAK6B,YAAzC,YAAwD7B,KAAK8B,cAEpF,OACE,uBACES,UAAU,SACVC,IAAKxC,KAAKL,gBACV8C,OAAQH,Q,GA1FKI,aCoMNC,E,kDArLb,WAAYvC,GAAa,IAAD,8BACtB,cAAMA,IAxBCwC,eAAsB,CAC7B,IAAO,CACLb,MAAO,IACPC,OAAQ,KAEV,IAAO,CACLD,MAAO,IACPC,OAAQ,KAEV,GAAM,CACJD,MAAO,KACPC,OAAQ,KAEV,KAAQ,CACND,MAAO,KACPC,OAAQ,KAEV,IAAO,CACLD,MAAO,KACPC,OAAQ,OAOV,EAAKa,MAAQ,CACXxC,YAAa,WACbyC,WAAY,MACZvC,MAAO,GACPwC,YAAa,IAPO,E,oDAWxB,SAA0BC,EAAeC,GACvCjD,KAAKkD,SAAL,2BACKlD,KAAK6C,OADV,kBAEGG,EAAQC,O,kBAIb,WACE,OAAOjD,KAAK4C,eAAe5C,KAAK6C,MAAMC,c,+BAGxC,SAA0BC,GACxB/C,KAAKkD,SAAS,CACZH,YAAaA,M,oBAIjB,WAAW,IAAD,SACgD/C,KAAK6C,MAArDE,EADA,EACAA,YAAa1C,EADb,EACaA,YAAayC,EAD1B,EAC0BA,WAAYvC,EADtC,EACsCA,MAE9C,OACE,sBAAKgC,UAAU,MAAf,UACE,sBAAMA,UAAU,YAAhB,SACE,cAAC,EAAD,CACEE,OAAQ,KACRnC,OAAQN,KAAKM,OACbD,YAAaA,EACbE,MAAOA,EACPE,kBAAmB,SAAC0C,GAAD,OAAe,EAAK1C,kBAAkB0C,QAG7D,wBAAOZ,UAAU,aAAjB,UACE,uBAAMa,KAAK,WAAX,UACE,qCACE,uDACA,kCACE,uBACElC,KAAK,QACLkC,KAAK,cACLH,MAAM,WACNI,eAAgC,aAAhBhD,EAChBiD,SAAU,kBAAM,EAAKC,iBAAiB,cAAe,eAEvD,+CAEF,kCACE,uBACErC,KAAK,QACLkC,KAAK,cACLH,MAAM,YACNI,eAAgC,cAAhBhD,EAChBiD,SAAU,kBAAM,EAAKC,iBAAiB,cAAe,gBAEvD,mDAIJ,qCACE,uDACA,kCACE,uBACErC,KAAK,QACLkC,KAAK,aACLH,MAAM,MACNI,eAA+B,QAAfP,EAChBQ,SAAU,kBAAM,EAAKC,iBAAiB,aAAc,UAEtD,iDAEF,kCACE,uBACErC,KAAK,QACLkC,KAAK,aACLH,MAAM,MACNI,eAA+B,QAAfP,EAChBQ,SAAU,kBAAM,EAAKC,iBAAiB,aAAc,UAEtD,iDAEF,kCACE,uBACErC,KAAK,QACLkC,KAAK,aACLH,MAAM,KACNI,eAA+B,OAAfP,EAChBQ,SAAU,kBAAM,EAAKC,iBAAiB,aAAc,SAEtD,kDAEF,kCACE,uBACErC,KAAK,QACLkC,KAAK,aACLH,MAAM,OACNI,eAA+B,SAAfP,EAChBQ,SAAU,kBAAM,EAAKC,iBAAiB,aAAc,WAEtD,kDAEF,kCACE,uBACErC,KAAK,QACLkC,KAAK,aACLH,MAAM,MACNI,eAA+B,QAAfP,EAChBQ,SAAU,kBAAM,EAAKC,iBAAiB,aAAc,UAEtD,sDAIJ,qCACE,2CACA,gCACE,uBACEH,KAAK,QACLlC,KAAK,SACLsC,IAAI,IACJC,IAAI,KACJC,KAAK,MACLC,aAAcpD,EACd+C,SAAU,SAACM,GAAD,OAAgB,EAAKL,iBAAiB,QAASK,EAAMC,OAAOC,0BAM9E,qCACE,iDACA,+BACE,qDACqB,iCAASf,EAAY1B,uBAE1C,uDACuB,iCAAS0B,EAAY3B,wBAE5C,iDACiB,iCAAS2B,EAAYjC,sBAEtC,kDACkB,iCAASP,OAE3B,qDACqB,iCAASwC,EAAY/B,mBAK9C,qCACE,0CACA,0EAC2C,4DAD3C,+GAIA,4FAGA,0GAGA,4F,GAnMM0B,aCAlBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.14dc3099.chunk.js","sourcesContent":["import React, { Component, createRef, RefObject } from 'react';\n\nimport './Player.scss';\n\nenum Orientation {\n  Portrait = 'portrait',\n  Landscape = 'landscape'\n}\n\nenum FitMode {\n  Contain = 'contain',\n  Cover = 'cover'\n}\n\nclass Player extends Component<any, any> {\n  private videoElementRef: RefObject<HTMLVideoElement> = createRef<HTMLVideoElement>();\n  private resizeObserver: ResizeObserver = new ResizeObserver(() => this.manageVideoOrientation());\n\n  componentDidMount() {\n    this.resizeObserver.observe(this.videoElement);\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<any>): boolean {\n    const { orientation, stream, delta } = this.props;\n    return nextProps.delta !== delta || nextProps.orientation !== orientation || nextProps.stream !== stream;\n  }\n\n  componentDidUpdate() {\n    this.manageVideoOrientation();\n  }\n\n  private get videoElement(): HTMLVideoElement {\n    return this.videoElementRef.current as HTMLVideoElement;\n  }\n\n  private manageVideoOrientation() {\n    if (!this.videoElement) return;\n\n    const { stream, delta, informationHandle } = this.props;\n    const videoElementOrientation: Orientation = this.getVideoElementOrientation();\n    const videoStreamOrientation: Orientation = this.getStreamOrientation();\n    const aspectRatioDelta = this.getAspectRationDelta();\n\n    let fitMode: FitMode = FitMode.Contain;\n\n    if (stream.type === 'screen') {\n      fitMode = FitMode.Contain;\n    } else if (videoElementOrientation === videoStreamOrientation) {\n      fitMode = FitMode.Cover;\n    } else if (aspectRatioDelta <= delta) {\n      fitMode = FitMode.Cover;\n    }\n\n    informationHandle({\n      fitMode: fitMode,\n      elementOrientation: videoElementOrientation,\n      streamOrientation: videoStreamOrientation,\n      aspectRatioDelta: aspectRatioDelta.toPrecision(3),\n    });\n\n    this.videoElement.style.objectFit = fitMode;\n  }\n\n  private getVideoElementOrientation(): Orientation {\n    return this.videoElement\n      ? this.getOrientation(this.videoElement.offsetWidth, this.videoElement.offsetHeight)\n      : Orientation.Landscape;\n  }\n\n  private getStreamOrientation(): Orientation {\n    return this.getOrientation(this.posterWidth, this.posterHeight);\n  }\n\n  private getOrientation(width: number, height: number): Orientation {\n    return width >= height\n      ? Orientation.Landscape\n      : Orientation.Portrait;\n  }\n\n  private getAspectRationDelta() {\n    const elementAspectRatio: number = this.videoElement.offsetWidth / this.videoElement.offsetHeight;\n    const streamAspectRation: number = this.posterWidth / this.posterHeight;\n    const delta: number = Math.abs(elementAspectRatio - streamAspectRation);\n\n    return delta;\n  }\n\n  private get posterWidth(): number {\n    const { orientation, stream } = this.props;\n    return orientation === Orientation.Landscape ? stream.width : stream.height;\n  }\n\n  private get posterHeight(): number {\n    const { orientation, stream } = this.props;\n    return orientation === Orientation.Landscape ? stream.height : stream.width;\n  }\n\n  render () {\n    const posterUrl: string = `https://picsum.photos/id/1074/${this.posterWidth}/${this.posterHeight}`;\n\n    return (\n      <video\n        className=\"player\"\n        ref={this.videoElementRef}\n        poster={posterUrl}\n      />\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from 'react';\n\nimport './App.scss';\nimport Player from './components/Player/Player';\n\nclass App extends Component<any, any> {\n  readonly dimensionsList: any = {\n    'vga': {\n      width: 640,\n      height: 480,\n    },\n    'wga': {\n      width: 800,\n      height: 480,\n    },\n    'hd': {\n      width: 1280,\n      height: 720,\n    },\n    'wxga': {\n      width: 1280,\n      height: 800,\n    },\n    'fhd': {\n      width: 1920,\n      height: 1080,\n    },\n  };\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      orientation: 'portrait',\n      dimensions: 'vga',\n      delta: 0.6,\n      information: {},\n    }\n  }\n\n  private formChangeHandle (field: string, value: any) {\n    this.setState({\n      ...this.state,\n      [field]: value,\n    });\n  }\n\n  private get stream(): any {\n    return this.dimensionsList[this.state.dimensions];\n  }\n\n  private informationHandle(information: any): void {\n    this.setState({\n      information: information,\n    });\n  }\n\n  render () {\n    const { information, orientation, dimensions, delta } = this.state;\n\n    return (\n      <div className=\"app\">\n        <main className=\"app__main\">\n          <Player\n            poster={null}\n            stream={this.stream}\n            orientation={orientation}\n            delta={delta}\n            informationHandle={(data: any) => this.informationHandle(data)}\n          />\n        </main>\n        <aside className=\"app__aside\">\n          <form name=\"settings\">\n            <fieldset>\n              <legend>Video orientation</legend>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"orientation\"\n                  value=\"portrait\"\n                  defaultChecked={orientation === 'portrait'}\n                  onChange={() => this.formChangeHandle('orientation', 'portrait')}\n                />\n                <span>Portrait</span>\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"orientation\"\n                  value=\"landscape\"\n                  defaultChecked={orientation === 'landscape'}\n                  onChange={() => this.formChangeHandle('orientation', 'landscape')}\n                />\n                <span>Landscape</span>\n              </label>\n            </fieldset>\n\n            <fieldset>\n              <legend>Webcam Dimensions</legend>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"dimensions\"\n                  value=\"vga\"\n                  defaultChecked={dimensions === 'vga'}\n                  onChange={() => this.formChangeHandle('dimensions', 'vga')}\n                />\n                <span>640&times;480</span>\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"dimensions\"\n                  value=\"wga\"\n                  defaultChecked={dimensions === 'wga'}\n                  onChange={() => this.formChangeHandle('dimensions', 'wga')}\n                />\n                <span>800&times;480</span>\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"dimensions\"\n                  value=\"hd\"\n                  defaultChecked={dimensions === 'hd'}\n                  onChange={() => this.formChangeHandle('dimensions', 'hd')}\n                />\n                <span>1280&times;720</span>\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"dimensions\"\n                  value=\"wxga\"\n                  defaultChecked={dimensions === 'wxga'}\n                  onChange={() => this.formChangeHandle('dimensions', 'wxga')}\n                />\n                <span>1280&times;800</span>\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"dimensions\"\n                  value=\"fhd\"\n                  defaultChecked={dimensions === 'fhd'}\n                  onChange={() => this.formChangeHandle('dimensions', 'fhd')}\n                />\n                <span>1920&times;1080</span>\n              </label>\n            </fieldset>\n\n            <fieldset>\n              <legend>Delta</legend>\n              <label>\n                <input\n                  name=\"delta\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"20\"\n                  step=\"0.1\"\n                  defaultValue={delta}\n                  onChange={(event: any) => this.formChangeHandle('delta', event.target.valueAsNumber)}\n                />\n              </label>\n            </fieldset>\n          </form>\n\n          <fieldset>\n            <legend>Information</legend>\n            <ul>\n              <li>\n                Video orientation: <strong>{information.streamOrientation}</strong>\n              </li>\n              <li>\n                Element orientation: <strong>{information.elementOrientation}</strong>\n              </li>\n              <li>\n                Element delta: <strong>{information.aspectRatioDelta}</strong>\n              </li>\n              <li>\n                Selected delta: <strong>{delta}</strong>\n              </li>\n              <li>\n                Selected fit mode: <strong>{information.fitMode}</strong>\n              </li>\n            </ul>\n          </fieldset>\n\n          <fieldset>\n            <legend>Note</legend>\n            <p>\n              If the video element and the stream have <strong>different orientations</strong>, the allowable delta between the aspect ratio\n              of the video element and the stream is taken into account.\n            </p>\n            <p>\n              This allows us to ignore small differences in aspect ratio.\n            </p>\n            <p>\n              The larger the allowed delta, the later it will switch to \"contain\" mode.\n            </p>\n            <p>\n              Set delta to zero to switch modes immediately.\n            </p>\n          </fieldset>\n        </aside>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}